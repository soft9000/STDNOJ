{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier{\*\falt Courier New};}{\f15\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}
{\f70\froman\fcharset238\fprq2 Times New Roman CE;}{\f71\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f73\froman\fcharset161\fprq2 Times New Roman Greek;}{\f74\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f75\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f76\fswiss\fcharset238\fprq2 Arial CE;}{\f77\fswiss\fcharset204\fprq2 Arial Cyr;}{\f79\fswiss\fcharset161\fprq2 Arial Greek;}{\f80\fswiss\fcharset162\fprq2 Arial Tur;}
{\f81\fswiss\fcharset186\fprq2 Arial Baltic;}{\f82\fmodern\fcharset238\fprq1 Courier New CE;}{\f83\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f85\fmodern\fcharset161\fprq1 Courier New Greek;}{\f86\fmodern\fcharset162\fprq1 Courier New Tur;}
{\f87\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f160\fswiss\fcharset238\fprq2 Tahoma CE;}{\f161\fswiss\fcharset204\fprq2 Tahoma Cyr;}{\f163\fswiss\fcharset161\fprq2 Tahoma Greek;}{\f164\fswiss\fcharset162\fprq2 Tahoma Tur;}
{\f165\fswiss\fcharset186\fprq2 Tahoma Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;
\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\sb100\sa100\nowidctlpar\adjustright \snext0 Normal;}{
\s1\sb240\sa60\keepn\nowidctlpar\adjustright \b\f1\fs40\cf9\kerning28 \sbasedon0 \snext0 heading 1;}{\s2\sb240\sa60\keepn\nowidctlpar\outlinelevel1\adjustright \b\f1\fs28\cf6 \sbasedon0 \snext0 heading 2;}{
\s3\li720\sb240\sa60\keepn\nowidctlpar\outlinelevel2\adjustright \b\f1\cf6 \sbasedon0 \snext0 heading 3;}{\*\cs10 \additive Default Paragraph Font;}{\s15\nowidctlpar\adjustright \sbasedon0 \snext16 Definition Term;}{\s16\li360\nowidctlpar\adjustright 
\sbasedon0 \snext15 Definition List;}{\*\cs17 \additive \i Definition;}{\s18\sb100\sa100\keepn\nowidctlpar\outlinelevel1\adjustright \b\fs48\kerning36 \sbasedon0 \snext0 H1;}{\s19\sb100\sa100\keepn\nowidctlpar\outlinelevel2\adjustright \b\fs36 
\sbasedon0 \snext0 H2;}{\s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28 \sbasedon0 \snext0 H3;}{\s21\sb100\sa100\keepn\nowidctlpar\outlinelevel4\adjustright \b \sbasedon0 \snext0 H4;}{
\s22\sb100\sa100\keepn\nowidctlpar\outlinelevel5\adjustright \b\fs20 \sbasedon0 \snext0 H5;}{\s23\sb100\sa100\keepn\nowidctlpar\outlinelevel6\adjustright \b\fs16 \sbasedon0 \snext0 H6;}{\s24\nowidctlpar\adjustright \i \sbasedon0 \snext0 Address;}{
\s25\li360\ri360\sb100\sa100\nowidctlpar\adjustright \sbasedon0 \snext25 Blockquote;}{\*\cs26 \additive \i CITE;}{\*\cs27 \additive \f2\fs18 CODE;}{\*\cs28 \additive \i \sbasedon10 Emphasis;}{\*\cs29 \additive \ul\cf2 \sbasedon10 Hyperlink;}{\*\cs30 
\additive \ul\cf12 \sbasedon10 FollowedHyperlink;}{\*\cs31 \additive \b\f2\fs20 Keyboard;}{\s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\tx9590\adjustright \f2\fs20 \sbasedon0 \snext32 Preformatted;}{
\s33\qc\nowidctlpar\brdrt\brdrdb\brdrw5\brdrcf1 \adjustright \v\f1\fs16 \snext0 \shidden z-Bottom of Form;}{\s34\qc\nowidctlpar\brdrb\brdrdb\brdrw5\brdrcf1 \adjustright \v\f1\fs16 \snext0 \shidden z-Top of Form;}{\*\cs35 \additive \f2 Sample;}{\*\cs36 
\additive \b \sbasedon10 Strong;}{\*\cs37 \additive \f2\fs20 Typewriter;}{\*\cs38 \additive \i Variable;}{\*\cs39 \additive \v\cf6 HTML Markup;}{\*\cs40 \additive \v Comment;}{\s41\sb100\sa100\nowidctlpar\adjustright \sbasedon0 \snext0 \sautoupd toc 1;}{
\s42\sb20\sa20\nowidctlpar\adjustright \shad\f2\fs22 \sbasedon0 \snext42 BoxCode;}{\s43\li240\sb100\sa100\nowidctlpar\adjustright \sbasedon0 \snext0 \sautoupd toc 2;}{\s44\li480\sb100\sa100\nowidctlpar\adjustright \sbasedon0 \snext0 \sautoupd toc 3;}{
\s45\li720\sb100\sa100\nowidctlpar\adjustright \sbasedon0 \snext0 \sautoupd toc 4;}{\s46\li960\sb100\sa100\nowidctlpar\adjustright \sbasedon0 \snext0 \sautoupd toc 5;}{\s47\li1200\sb100\sa100\nowidctlpar\adjustright \sbasedon0 \snext0 \sautoupd toc 6;}{
\s48\li1440\sb100\sa100\nowidctlpar\adjustright \sbasedon0 \snext0 \sautoupd toc 7;}{\s49\li1680\sb100\sa100\nowidctlpar\adjustright \sbasedon0 \snext0 \sautoupd toc 8;}{\s50\li1920\sb100\sa100\nowidctlpar\adjustright \sbasedon0 \snext0 \sautoupd toc 9;}{
\s51\sb100\sa100\nowidctlpar\adjustright \cbpat9 \f15 \sbasedon0 \snext51 Document Map;}}{\*\listtable{\list\listtemplateid0{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}
\fi-360\li720 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'03.;}{\levelnumbers\'01;}\fi-360\li2880 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\'02\'04.;}{\levelnumbers\'01;}\fi-360\li3600 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'05.;}{\levelnumbers\'01;}\fi-360\li4320 }{\listlevel\levelnfc0\leveljc0
\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'06.;}{\levelnumbers\'01;}\fi-360\li5040 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'07.;}{\levelnumbers\'01;}\fi-360\li5760 }
{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listname ;}\listid1}}{\*\listoverridetable}{\info{\title Using the Neat Odd Job Namespace}{\author R.A. Nagy}
{\operator Valued Gateway Customer}{\creatim\yr2006\mo11\dy12\hr5\min52}{\revtim\yr2008\mo7\dy18\hr7\min15}{\version59}{\edmins205}{\nofpages13}{\nofwords1318}{\nofchars7514}{\*\company  }{\nofcharsws9227}{\vern89}}{\*\userprops {\propname Generator}
\proptype30{\staticval Microsoft Word 97}}\margl1440\margr1440 \widowctrl\ftnbj\aenddoc\hyphcaps0\viewkind5\viewscale100 \fet0\sectd \linex0\headery1440\footery1440\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}\pard\plain \s1\sb240\sa60\keepn\nowidctlpar\outlinelevel0\adjustright \b\f1\fs40\cf9\kerning28 {{\*\bkmkstart _Toc151086108}A Beginners Guide{\*\bkmkend _Toc151086108}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright {\fs32 If a picture is worth a thousand words then, when programming, a snippet of code is worth at }{\i\fs32 least}{\fs32  a few hundred explanations!
\par Here is the first:}{\f6\fs32 
\par }{
\par }\trowd \trgaph108\trrh1700\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \clcbpat16\cltxlrtb 
\cellx9468\pard\plain \s42\sb20\sa20\nowidctlpar\intbl\adjustright \shad\f2\fs22 {#include <stdnoj.hpp>
\par using namespace }{\b\cf11 stdnoj}{;
\par int main(int argc, char *argv[])
\par \{
\par \}\cell }\pard\plain \widctlpar\intbl\adjustright {\row }\pard \sb100\sa100\nowidctlpar\adjustright {
\par }{\fs32 Once we have the main }{\fs32\cf11 stdnoj.hpp}{\fs32  file }{\field\flddirty{\*\fldinst {\fs32  HYPERLINK "http://stdnoj.cvs.sourceforge.net/stdnoj/stdnoj/" }{\fs20 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b6200000068007400740070003a002f002f007300740064006e006f006a002e006300760073002e0073006f00750072006300650066006f007200670065002e006e00650074002f007300740064006e006f006a002f00
7300740064006e006f006a002f00000000000000}}}{\fldrslt {\cs29\fs32\ul\cf2 downloaded}}}{\fs32  and located somewhere along our include path, there are many things that we can do. This document describes just a few of them. 
\par 
\par }\pard\plain \s2\sb240\sa60\keepn\nowidctlpar\outlinelevel1\adjustright \b\f1\fs28\cf6 {{\*\bkmkstart _Toc151086109}File System Support{\*\bkmkend _Toc151086109}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright {\fs32 Long before the Internet was popular, this goal of this project was to provide cross-pla
tform support for basic file and directory operations. Before you can compile, you will need to globally #define your platform as either }{\b\fs32\cf2 WIN32}{\fs32 , }{\b\fs32\cf2 UNIX}{\fs32 , }{\b\fs32\cf2 DOS}{\fs32 , or }{\b\fs32\cf2 OSX}{\fs32 . 

\par 
\par While support for WIN32 enjoys the most comprehensive, support for DOS and UNIX/Linux are not too far behind. Better support for OSX and others is in the works.
\par 
\par Because files system interactions are the most common model across these operating systems, the }{\field\flddirty{\*\fldinst {\fs32  HYPERLINK "http://soft9000.com/NOJ_Introduction.html" }{\fs20 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b5400000068007400740070003a002f002f0073006f006600740039003000300030002e0063006f006d002f004e004f004a005f0049006e00740072006f00640075006300740069006f006e002e00680074006d006c00
000000000000}}}{\fldrslt {\cs29\fs32\ul\cf2 Namespace}}}{\fs32  has a lot of "inode support."
\par 
\par }\pard\plain \s3\li720\sb240\sa60\keepn\nowidctlpar\outlinelevel2\adjustright \b\f1\cf6 {{\*\bkmkstart _Toc151086110}The File{\*\bkmkend _Toc151086110}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright {\fs32 First, and unless you are programming for something like Version 5 of the Palm OS, then your program will probably be using a lot of files.
\par 
\par }\trowd \trgaph108\trrh3240\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \clcbpat16\cltxlrtb 
\cellx9468\pard\plain \s42\sb20\sa20\nowidctlpar\intbl\adjustright \shad\f2\fs22 {#include <stdnoj.hpp>
\par using namespace stdnoj;
\par int main(int argc, char *argv[])
\par }\pard \s42\li720\sb20\sa20\nowidctlpar\intbl\adjustright {\{
\par }{\cf11 // Create a file - default name is "default.file"
\par }{File file;
\par }{\cf11 // Name the file something
\par }{if(file.}{\b\cf11 Name}{("myfile.txt") == }{\f6\cf2 false}{)
\par    cerr << "bad platform name";
\par \}\cell }\pard\plain \widctlpar\intbl\adjustright {\row }\pard \sb100\sa100\nowidctlpar\adjustright {\fs32 
\par Because directory and path separators can be different between various operating systems, the Namespace also has a }{\fs32\cf11 FilePath}{\fs32  Class. Amongst other things, FilePath allows us to peek at the default path separator.
\par 
\par }\trowd \trgaph108\trrh377\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \clcbpat16\cltxlrtb 
\cellx9468\pard\plain \s42\sb20\sa20\nowidctlpar\intbl\adjustright \shad\f2\fs22 {inline char }{\cf11 PathChar}{(void)
\par    \{
\par    FilePath fp;
\par    return fp.PathChar();
\par    \}\cell }\pard\plain \widctlpar\intbl\adjustright {\row }\pard \sb100\sa100\nowidctlpar\adjustright {\fs32 
\par As defined above, }{\fs32\cf11 PathChar()}{\fs32  is a globally defined macro. While located in FilePath.hpp, the macro is available every time you use the Namespace.
\par 
\par }\pard\plain \s3\li720\sb240\sa60\keepn\nowidctlpar\outlinelevel2\adjustright \b\f1\cf6 {{\*\bkmkstart _Toc151086111}Directories}{\fs32 {\*\bkmkend _Toc151086111}
\par }\pard\plain \sb100\sa100\nowidctlpar\outlinelevel0\adjustright {\fs32 Directories are also a very common cross-platform convention. 
\par }\pard \sb100\sa100\nowidctlpar\adjustright {\fs32 
\par }\pard\plain \s42\sb20\sa20\nowidctlpar\intbl\adjustright \shad\f2\fs22 {\cf2 #include}{ <stdnoj.hpp>
\par }{\cf2 using}{ }{\cf2 namespace}{ stdnoj;
\par 
\par }{\cf2 int}{ main(}{\cf2 int}{ argc, }{\cf2 char}{ *argv[])
\par }\pard \s42\li720\sb20\sa20\nowidctlpar\intbl\adjustright {\{
\par }{\cf11 // Create a file - default name is "default.file"
\par }{File file;
\par }{\cf11 // Name the file something
\par }{\cf2 if}{(file.Name("myfile.txt") == }{\cf2 false}{)
\par    cerr << "bad platform name";
\par 
\par }{\cf11 // Directories default to the 'pwd'
\par }{Directory dir;
\par }{\cf11 // The "Home" function places a node into a folder
\par }{\cf2 if}{(dir.Home(file) == }{\cf2 false}{)
\par    cerr << "bad folder name";
\par \}\cell }\pard\plain \widctlpar\intbl\adjustright {\row }\pard \sb100\sa100\nowidctlpar\adjustright {\fs32 
\par While Files and Directories evolved separately, by the time they were eventually re-factored and ported over to the modern Namespace both }{\fs32\cf11 File}{\fs32  and }{\fs32\cf11 Directory}{\fs32  had a lot to do with each other!
\par 
\par }\pard\plain \s3\li720\sb240\sa60\keepn\nowidctlpar\outlinelevel2\adjustright \b\f1\cf6 {{\*\bkmkstart _Toc151086112}Directory Content}{\fs32 {\*\bkmkend _Toc151086112}
\par }\pard\plain \sb100\sa100\nowidctlpar\outlinelevel0\adjustright {\fs32 The ultimate container, a Directory can manage both files and folders.
\par }\pard \sb100\sa100\nowidctlpar\adjustright {\fs32 
\par }\pard\plain \s42\sb20\sa20\nowidctlpar\intbl\adjustright \shad\f2\fs22 {\cf2 void}{ QueryFileContent(}{\cf2 void}{)
\par }\pard \s42\li720\sb20\sa20\nowidctlpar\intbl\adjustright {\{
\par }{\cf11 // The array class is the major container
\par // for this namespace
\par }{Array<File> aryFiles;
\par 
\par Directory dir;
\par }{\cf11 // Both folders and files and be queried
\par }{dir.Query(aryFiles);
\par }{\cf11 // Nelem() returns the count of the objects 
\par // (ones based)
\par }{\cf2 for}{(size_t ss = 0L; ss < aryFiles.Nelem(); ss++)
\par    cout << "Got " << aryFiles[ss].Name() << endl;
\par \}\cell }\pard\plain \widctlpar\intbl\adjustright {\row }\pard \sb100\sa100\nowidctlpar\adjustright {\fs32 
\par The first rule of modeling }{\i\fs32 should be}{\fs32  to create classes that use things 
in a similar way.  When related classes use similar class signatures, very few things need to be re-learned. When we know how to work with one, how know how to work with another.
\par 
\par }\pard\plain \s42\sb20\sa20\nowidctlpar\intbl\adjustright \shad\f2\fs22 {\cf2 void}{ QueryContent(}{\cf2 const}{ Directory& dir)
\par }\pard \s42\li720\sb20\sa20\nowidctlpar\intbl\adjustright {\{
\par Array<File> aryFiles;
\par dir.}{\cf11 Query}{(aryFiles);
\par }{\cf2 for}{(size_t ss = 0L; ss < aryFiles.Nelem(); ss++)
\par    cout << "Got " << aryFiles[ss].}{\cf11 Name}{() << endl;
\par 
\par Array<File> aryDirs;
\par dir.}{\cf11 Query}{(aryDirs);
\par }{\cf2 for}{(size_t ss = 0L; ss < aryDirs.Nelem(); ss++)
\par    cout << "Got " << aryDirs[ss].}{\cf11 Name}{() << endl;
\par \}\cell }\pard\plain \widctlpar\intbl\adjustright {\row }\pard \sb100\sa100\nowidctlpar\adjustright {\fs32 
\par Notice that because the design of the File Class is much like the design of Directory, that using these objects is easy. 
\par 
\par }\pard\plain \s2\sb240\sa60\keepn\nowidctlpar\outlinelevel1\adjustright \b\f1\fs28\cf6 {{\*\bkmkstart _Toc151086113}Collections & Templates{\*\bkmkend _Toc151086113}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright {\fs32 From collecting email to managing sockets and folders, the Namespace does it all us
ing a mere handful of templates. Because Namespace Templates do not rely upon any other template libraries (like the Standard Template Library), }{\b\fs32\cf11 stdnoj}{\fs32  can be used either stand-alone or with other tool sets.
\par }{
\par }\pard\plain \s3\li720\sb240\sa60\keepn\nowidctlpar\outlinelevel2\adjustright \b\f1\cf6 {{\*\bkmkstart _Toc151086114}STL Compatibility{\*\bkmkend _Toc151086114}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright {\fs32 The following example demonstrates how easy it can be to use the Array Class with an STL string.
\par 
\par }\pard\plain \s42\sb20\sa20\nowidctlpar\intbl\adjustright \shad\f2\fs22 {\cf2 void}{ TheString(}{\cf2 void}{)
\par }\pard \s42\li720\sb20\sa20\nowidctlpar\intbl\adjustright {\{
\par Array<string> array;
\par array[0] = "this";
\par array[1] = "is a";
\par array[2] = "test!";
\par \}\cell }\pard\plain \widctlpar\intbl\adjustright {\row }\pard \sb100\sa100\nowidctlpar\adjustright {\fs32 
\par }\pard\plain \s3\li720\sb240\sa60\keepn\nowidctlpar\outlinelevel2\adjustright \b\f1\cf6 {{\*\bkmkstart _Toc151086115}Common Signatures{\*\bkmkend _Toc151086115}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright {\fs32 
Just like when we were demonstrating the File and Directory Classes, templates require that managed objects share portions of a certain signature. This commonality allows us to manage an array of objects in a similar manner.
\par 
\par }\pard\plain \s42\sb20\sa20\nowidctlpar\intbl\adjustright \shad\f2\fs22 {\cf2 void}{ TheStdString(}{\cf2 void}{)
\par }\pard \s42\li720\sb20\sa20\nowidctlpar\intbl\adjustright {\{
\par Array<}{\cf11 StdString}{> array;
\par array[0] = "this";
\par array[1] = "is a";
\par array[2] = "test!";
\par 
\par File file;
\par array.write(file.OpenWrite());
\par file.Close();
\par \}\cell }\pard\plain \widctlpar\intbl\adjustright {\row }\pard \sb100\sa100\nowidctlpar\adjustright {\fs32 
\par Because the string class shares common assignment, comparison, and stream member functions, }{\fs32\cf11 StdString}{\fs32  is the preferred string for the }{\b\fs32\cf11 stdnoj}{\fs32  namespace.
\par 
\par }\pard\plain \s2\sb240\sa60\keepn\nowidctlpar\outlinelevel1\adjustright \b\f1\fs28\cf6 {{\*\bkmkstart _Toc151086116}Object Storage and Retrieval}{\fs32 {\*\bkmkend _Toc151086116}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright {\fs32 In addition to file system and array operations, the Namespace also has a lot of support for managing collections of data. From storing the content of an array to ma
naging user preferences, spreadsheet data, and indexed object content, it is very likely that }{\b\fs32\cf11 stdnoj}{\fs32  has a lot to help you along with your maintenance chores.
\par 
\par }\pard\plain \s3\li720\sb240\sa60\keepn\nowidctlpar\outlinelevel2\adjustright \b\f1\cf6 {{\*\bkmkstart _Toc151086117}Character Delimited Text{\*\bkmkend _Toc151086117}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright {\fs32 As in any language, the }{\b\fs32\cf11 stdnoj}{\fs32 
 string class is one of the most used classes. For the reason, the Namespace has very robust and mature support for string management. Here is a teaser:
\par 
\par }\pard\plain \s42\sb20\sa20\nowidctlpar\intbl\adjustright \shad\f2\fs22 {Array<StdString> SplitTabs(}{\cf2 const}{ StdString& sTab)
\par \{
\par }{\cf2 return}{ sTab.slice('\\t');
\par \}\cell }\pard\plain \widctlpar\intbl\adjustright {\row }\pard \sb100\sa100\nowidctlpar\adjustright {\fs32 
\par The above example demonstrates how easy it can be to split any string into an array... not something other string classes are usually able to do in a single line of code...
\par 
\par }\pard\plain \s3\li720\sb240\sa60\keepn\nowidctlpar\outlinelevel2\adjustright \b\f1\cf6 {Appreciating StdString
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright {\fs32 Because the }{\fs32\cf11 StdString}{\fs32  Class contains many such handy operations, many feel that 
it is a good place to start an investigation into what the Namespace can do for you. While we plan to re-write the StdString class to us STL's }{\i\fs32 string}{\fs32  and }{\i\fs32 wstring}{\fs32 
 types like Array, the class is well represented in the Namespace.
\par 
\par }\pard\plain \s3\li720\sb240\sa60\keepn\nowidctlpar\outlinelevel2\adjustright \b\f1\cf6 {{\*\bkmkstart _Toc151086118}Direct File Objects (DFO){\*\bkmkend _Toc151086118}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright {\fs32 
In order to increase loading performance as well as to allow many collections to be streamed in and out of a single file, the Array Class saves the number of objects that it writes at the beginning of each stream. Many }{\b\fs32\cf11 stdnoj}{\fs32  class
es are aware of this convention.
\par 
\par }\pard \sb100\sa100\nowidctlpar\intbl\adjustright {\f6\cf2 #include}{\f6  <noj/DFO.hpp>
\par }\pard\plain \s42\sb20\sa20\nowidctlpar\intbl\adjustright \shad\f2\fs22 {\cf2 void}{ FileImport(}{\cf2 const}{ File& file)
\par }\pard \s42\li720\sb20\sa20\nowidctlpar\intbl\adjustright {\{
\par }{\cf11 // "Direct File Object" are either in a "heap"
\par // (one after another) or in an "Array" (prefixed 
\par // with the number of objects saved)
\par }{DFO<StdString> tabFile;
\par tabFile.Name(file);
\par }{\cf11 // Loads a binary file from a "heap"
\par }{tabFile.Load(File::AT_TEXT, }{\cf2 false}{);
\par }{\cf11 // Saves a text file of strings in a "Array"
\par }{tabFile.Save(File::AT_BINARY, }{\cf2 true}{);
\par \}\cell }\pard\plain \widctlpar\intbl\adjustright {\row }\pard \sb100\sa100\nowidctlpar\adjustright {\fs32 
\par Because the Class will read data stored in heap }{\i\fs32 or}{\fs32  array formats, DFO allows us to make a distinction between (1) when we want to manage an Array of objects or (2) when we want to merely work with a disk-based collection of same.
\par 
\par }\pard\plain \s3\li720\sb240\sa60\keepn\nowidctlpar\outlinelevel2\adjustright \b\f1\cf6 {{\*\bkmkstart _Toc151086119}Indexing Data{\*\bkmkend _Toc151086119}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright {\fs32 When it comes to managing a huge amount of data without loading an entire file into memory, the }{\b\fs32\cf11 StdSeek}{\fs32  Class allows us to do so easily.
\par 
\par }\pard\plain \s42\sb20\sa20\nowidctlpar\intbl\adjustright \shad\f2\fs22 {\cf2 void}{ IndexFile(}{\cf2 const}{ File& file)
\par }\pard \s42\li720\sb20\sa20\nowidctlpar\intbl\adjustright {\{
\par DFO<StdString> tabFile;
\par tabFile.Name(file);
\par }{\cf11 // Loads a binary file from a "heap"
\par }{tabFile.Load(File::AT_TEXT, }{\cf2 false}{);
\par 
\par }{\cf11 // }{\b\cf6 WARNING:}{\cf11  This over writes the file
\par // with the indexed content!
\par }{StdSeek<StdString> indexFile;
\par indexFile.Name(file);
\par }{\cf2 for}{(size_t ss = 0L; ss < tabFile.Nelem(); ss++)
\par    indexFile.Append(tabFile[ss]);
\par \}\cell }\pard\plain \widctlpar\intbl\adjustright {\row }\pard \sb100\sa100\nowidctlpar\adjustright {\fs32 
\par Once indexed, virtually instantaneous access to any individual object in a file is assured... very handy when managing a monstrous collection of data! 
\par 
\par }\pard\plain \s2\sb240\sa60\keepn\nowidctlpar\outlinelevel1\adjustright \b\f1\fs28\cf6 {{\*\bkmkstart _Toc151086120}Program Identity{\*\bkmkend _Toc151086120}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright {\fs32 While the sorted details of internal operating system machinations differ wildly today, developers often feel the need to quickly know }{\i\fs32 just where their programs are running}{\fs32 . 

\par The }{\b\fs32\cf11 ProgramId}{\fs32  Class helps us to keep track of things.
\par 
\par }\pard\plain \s42\sb20\sa20\nowidctlpar\intbl\adjustright \shad\f2\fs22 {\cf2 void}{ HomeBody(}{\cf2 void}{)
\par }\pard \s42\li720\sb20\sa20\nowidctlpar\intbl\adjustright {\{
\par }{\cf11 // Using ProgramId to home-in 
\par // on resources
\par }{ProgramId pid;
\par 
\par Directory dir;
\par pid.Home(dir);
\par 
\par File file;
\par pid.Home(file);
\par \}\cell }\pard\plain \widctlpar\intbl\adjustright {\row }\pard \sb100\sa100\nowidctlpar\adjustright {\fs32  
\par Like the StdString, File, Directory, and Array Classes, the }{\fs32\cf11 ProgramId}{\fs32  Class seems to make it into just about everyone's program sooner or later.
\par  
\par }\pard\plain \s2\sb240\sa60\keepn\nowidctlpar\outlinelevel1\adjustright \b\f1\fs28\cf6 {{\*\bkmkstart _Toc151086121}Conclusion{\*\bkmkend _Toc151086121}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright {\fs32 
While this should help you get started, we have just scratched the surface of what this Namespace can do for you. As time permits we will try to cover the operation of EMail, IniFile, RfcServer, StdLog, and many, many more classes. Be sure to check back a
 few time each year to see what we are able to get done. 
\par 
\par Now that you have been armed with the basics it would be a great time to jump right to the }{\fs32\cf11 stdnoj/}{\field\flddirty{\*\fldinst {\fs32\cf11  HYPERLINK "http://stdnoj.cvs.sourceforge.net/stdnoj/stdnoj/projects/" }{\fs20\cf11 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7400000068007400740070003a002f002f007300740064006e006f006a002e006300760073002e0073006f00750072006300650066006f007200670065002e006e00650074002f007300740064006e006f006a002f00
7300740064006e006f006a002f00700072006f006a0065006300740073002f00000000000000}}}{\fldrslt {\cs29\fs32\ul\cf2 pro{\*\bkmkstart _Hlt151087764}j{\*\bkmkend _Hlt151087764}ects}}}{\fs32 
 directory to see what other type things you can do with the namespace. Because we have used this project on everything from Borland to Visual Studio, it should compile well on your platform. While support for WIN32 is the most comprehensive (it is
 where we earn the }{\field\flddirty{\*\fldinst {\fs32  HYPERLINK "http://soft9000.com/" }{\fs20 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b2a00000068007400740070003a002f002f0073006f006600740039003000300030002e0063006f006d002f00000000000000}}}{\fldrslt {\cs29\fs32\ul\cf2 most money}}}{\fs32 
), in addition to perfecting the Linux and Unix support plans are even afoot for finishing up under Carbon on Mac OSX!
\par 
\par Enjoy,
\par 
\par R. Nagy
\par }{
\par }}